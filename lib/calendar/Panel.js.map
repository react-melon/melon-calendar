{"version":3,"sources":["calendar/Panel.js"],"names":["DateTime","cx","CalendarPanel","props","onHeaderClick","bind","onSelectorChange","onPagerChange","onDateChange","d","date","Date","getFullYear","getMonth","getDate","state","selectorType","month","componentWillReceiveProps","nextProps","isEqualDate","setState","shouldComponentUpdate","nextState","isEqualMonth","begin","end","e","mode","isBeforeDate","isAfterDate","monthDiff","addMonths","onChange","value","render","lang","build","part","display","displayName","defaultProps","propTypes","instanceOf","isRequired"],"mappings":"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","file":"Panel.js","sourcesContent":["/**\n * @file melon/CalendarPanel\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Header from './Header';\nimport Selector from './Selector';\nimport Pager from './Pager';\nimport Month from './Month';\n\nimport * as DateTime from '../util';\n\nconst cx = create('CalendarPanel');\n\n/**\n * melon-calendar 日期选择主面板\n *\n * @class\n * @extends {React.Component}\n */\nexport default class CalendarPanel extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @param  {Object} props   组件属性\n     * @public\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.onHeaderClick = this.onHeaderClick.bind(this);\n        this.onSelectorChange = this.onSelectorChange.bind(this);\n        this.onPagerChange = this.onPagerChange.bind(this);\n        this.onDateChange = this.onDateChange.bind(this);\n\n        // 除年月日以外的时间数据清0\n        const d = props.date;\n        const date = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n\n        /**\n         * 组件状态\n         *\n         * @type {Object}\n         */\n        this.state = {\n            selectorType: 'main',\n            month: date,\n            date\n        };\n\n    }\n\n    /**\n     * 组件每次更新属性时判断是否需要同步状态\n     *\n     * @param  {Object} nextProps 新属性\n     * @public\n     */\n    componentWillReceiveProps(nextProps) {\n\n        const date = nextProps.date;\n\n        if (!DateTime.isEqualDate(date, this.props.date)) {\n            this.setState({\n                date,\n                month: date\n            });\n        }\n    }\n\n    /**\n     * 判断是否需要更新，性能优化\n     *\n     * @param  {Object} nextProps  组件新的属性\n     * @param  {Object} nextState  组件新的状态\n     * @return {bool}  是否需要更新\n     * @public\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return !DateTime.isEqualDate(nextState.date, this.state.date)\n            || !DateTime.isEqualMonth(nextState.month, this.state.month)\n            || nextState.selectorType !== this.state.selectorType\n            || (nextProps.begin && this.props.begin && !DateTime.isEqualDate(nextProps.begin, this.props.begin))\n            || (nextProps.end && this.props.end && !DateTime.isEqualDate(nextProps.end, this.props.end))\n            || (!nextProps.begin && this.props.begin)\n            || (!nextProps.end && this.props.end)\n            || (nextProps.begin && !this.props.begin)\n            || (nextProps.end && !this.props.end);\n    }\n\n    /**\n     * 点击 Header 切换日期、年/月选择\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onHeaderClick(e) {\n\n        const selectorType = this.state.selectorType;\n\n        this.setState({\n            selectorType: selectorType === 'main' ? 'year' : 'main'\n        });\n    }\n\n    /**\n     * 年/月选择改变的事件\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onSelectorChange(e) {\n\n        let {\n            mode,\n            date\n        } = e;\n\n        const {\n            end,\n            begin\n        } = this.props;\n\n        mode = mode === 'year' ? 'month' : 'main';\n\n        if (begin && DateTime.isBeforeDate(date, begin)) {\n            date = begin;\n        }\n        else if (end && DateTime.isAfterDate(date, end)) {\n            date = end;\n        }\n\n        this.setState({\n            date: date,\n            month: date,\n            selectorType: mode\n        });\n\n    }\n\n    /**\n     * 月份翻页器改变\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onPagerChange(e) {\n        this.setState({month: e.month});\n    }\n\n    /**\n     * 选择某一天时触发\n     *\n     * @param  {Object} e 事件对象\n     */\n    onDateChange(e) {\n\n        const date = e.date;\n\n        const month = this.state.month;\n        const monthDiff = DateTime.monthDiff(date, month);\n\n        if (monthDiff !== 0) {\n            this.setState({\n                month: DateTime.addMonths(month, monthDiff)\n            });\n        }\n\n        this.props.onChange({\n            value: date\n        });\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            lang,\n            begin,\n            end\n        } = this.props;\n\n        const date = this.state.date;\n\n        const {selectorType, month} = this.state;\n\n        return (\n            <div className={cx(this.props).build()}>\n                <Header\n                    date={date}\n                    onClick={this.onHeaderClick} />\n                <div className={cx().part('main').build()}>\n                    <Pager\n                        minDate={begin}\n                        maxDate={end}\n                        onChange={this.onPagerChange}\n                        month={month} />\n                    <Month\n                        minDate={begin}\n                        maxDate={end}\n                        lang={lang}\n                        month={month}\n                        date={date}\n                        onChange={this.onDateChange} />\n                    <Selector\n                        style={{display: selectorType === 'main' ? 'none' : null}}\n                        date={date}\n                        mode={selectorType === 'year' ? 'year' : 'month'}\n                        minDate={begin}\n                        maxDate={end}\n                        onChange={this.onSelectorChange} />\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nCalendarPanel.displayName = 'CalendarPanel';\n\nCalendarPanel.defaultProps = {\n    date: new Date()\n};\n\nCalendarPanel.propTypes = {\n    date: PropTypes.instanceOf(Date).isRequired,\n    begin: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date)\n};\n"]}