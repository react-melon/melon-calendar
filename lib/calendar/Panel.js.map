{"version":3,"sources":["calendar/Panel.js"],"names":["DateTime","cx","CalendarPanel","props","onHeaderClick","bind","onSelectorChange","onPagerChange","onDateChange","state","selectorType","month","date","componentWillReceiveProps","nextProps","isEqualDate","setState","shouldComponentUpdate","nextState","isEqualMonth","begin","end","e","mode","isBeforeDate","isAfterDate","monthDiff","addMonths","onChange","value","render","lang","build","part","display","displayName","defaultProps","Date","propTypes","instanceOf"],"mappings":"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","file":"Panel.js","sourcesContent":["/**\n * @file melon/CalendarPanel\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Header from './Header';\nimport Selector from './Selector';\nimport Pager from './Pager';\nimport Month from './Month';\n\nimport * as DateTime from '../util';\n\nconst cx = create('CalendarPanel');\n\n/**\n * melon-calendar 日期选择主面板\n *\n * @class\n * @extends {React.Component}\n */\nexport default class CalendarPanel extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @param  {Object} props   组件属性\n     * @public\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.onHeaderClick = this.onHeaderClick.bind(this);\n        this.onSelectorChange = this.onSelectorChange.bind(this);\n        this.onPagerChange = this.onPagerChange.bind(this);\n        this.onDateChange = this.onDateChange.bind(this);\n\n        /**\n         * 组件状态\n         *\n         * @type {Object}\n         */\n        this.state = {\n            selectorType: 'main',\n            month: props.date,\n            date: props.date\n        };\n\n    }\n\n    /**\n     * 组件每次更新属性时判断是否需要同步状态\n     *\n     * @param  {Object} nextProps 新属性\n     * @public\n     */\n    componentWillReceiveProps(nextProps) {\n\n        const date = nextProps.date;\n\n        if (!DateTime.isEqualDate(date, this.props.date)) {\n            this.setState({\n                date,\n                month: date\n            });\n        }\n    }\n\n    /**\n     * 判断是否需要更新，性能优化\n     *\n     * @param  {Object} nextProps  组件新的属性\n     * @param  {Object} nextState  组件新的状态\n     * @return {bool}  是否需要更新\n     * @public\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return !DateTime.isEqualDate(nextState.date, this.state.date)\n            || !DateTime.isEqualMonth(nextState.month, this.state.month)\n            || nextState.selectorType !== this.state.selectorType\n            || (nextProps.begin && this.props.begin && !DateTime.isEqualDate(nextProps.begin, this.props.begin))\n            || (nextProps.end && this.props.end && !DateTime.isEqualDate(nextProps.end, this.props.end))\n            || (!nextProps.begin && this.props.begin)\n            || (!nextProps.end && this.props.end)\n            || (nextProps.begin && !this.props.begin)\n            || (nextProps.end && !this.props.end);\n    }\n\n    /**\n     * 点击 Header 切换日期、年/月选择\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onHeaderClick(e) {\n\n        const selectorType = this.state.selectorType;\n\n        this.setState({\n            selectorType: selectorType === 'main' ? 'year' : 'main'\n        });\n    }\n\n    /**\n     * 年/月选择改变的事件\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onSelectorChange(e) {\n\n        let {\n            mode,\n            date\n        } = e;\n\n        const {\n            end,\n            begin\n        } = this.props;\n\n        mode = mode === 'year' ? 'month' : 'main';\n\n        if (begin && DateTime.isBeforeDate(date, begin)) {\n            date = begin;\n        }\n        else if (end && DateTime.isAfterDate(date, end)) {\n            date = end;\n        }\n\n        this.setState({\n            date: date,\n            month: date,\n            selectorType: mode\n        });\n\n    }\n\n    /**\n     * 月份翻页器改变\n     *\n     * @param  {Object} e 事件对象\n     * @protected\n     */\n    onPagerChange(e) {\n        this.setState({month: e.month});\n    }\n\n    /**\n     * 选择某一天时触发\n     *\n     * @param  {Object} e 事件对象\n     */\n    onDateChange(e) {\n\n        const date = e.date;\n\n        const month = this.state.month;\n        const monthDiff = DateTime.monthDiff(date, month);\n\n        if (monthDiff !== 0) {\n            this.setState({\n                month: DateTime.addMonths(month, monthDiff)\n            });\n        }\n\n        this.props.onChange({\n            value: date\n        });\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            lang,\n            begin,\n            end\n        } = this.props;\n\n        const date = this.state.date;\n\n        const {selectorType, month} = this.state;\n\n        return (\n            <div className={cx(this.props).build()}>\n                <Header\n                    date={date}\n                    onClick={this.onHeaderClick} />\n                <div className={cx().part('main').build()}>\n                    <Pager\n                        minDate={begin}\n                        maxDate={end}\n                        onChange={this.onPagerChange}\n                        month={month} />\n                    <Month\n                        minDate={begin}\n                        maxDate={end}\n                        lang={lang}\n                        month={month}\n                        date={date}\n                        onChange={this.onDateChange} />\n                    <Selector\n                        style={{display: selectorType === 'main' ? 'none' : null}}\n                        date={date}\n                        mode={selectorType === 'year' ? 'year' : 'month'}\n                        minDate={begin}\n                        maxDate={end}\n                        onChange={this.onSelectorChange} />\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nCalendarPanel.displayName = 'CalendarPanel';\n\nCalendarPanel.defaultProps = {\n    date: new Date()\n};\n\nCalendarPanel.propTypes = {\n    date: PropTypes.instanceOf(Date),\n    begin: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date)\n};\n"]}