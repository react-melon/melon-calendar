{"version":3,"sources":["Calendar.js"],"names":["DateTime","cx","Calendar","props","context","onLabelClick","bind","onConfirm","onCancel","onDateChange","defaultValue","value","date","state","stringifyValue","parseDate","open","componentWillUpdate","_","nextState","isEqualDate","setState","rawValue","isDate","dateFormat","format","parse","newDate","Date","onChange","type","target","e","newState","autoConfirm","renderHiddenInput","name","render","lang","disabled","readOnly","size","placeholder","others","begin","end","className","addStates","focus","getStyleStates","build","part","displayName","LANG","week","days","defaultProps","propTypes","string","bool","oneOfType","object","shape","childContextTypes","contextTypes"],"mappings":"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","file":"Calendar.js","sourcesContent":["/**\n * @file melon/Calendar\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {PropTypes} from 'react';\n\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Icon from 'melon/Icon';\nimport Confirm from 'melon/Confirm';\n\nimport Panel from './calendar/Panel';\nimport * as DateTime from './util';\nimport omit from 'lodash/omit';\n\nconst cx = create('Calendar');\n\n\n/**\n * melon 日期选择器\n *\n * @class\n * @extends {melon-core/InputComponent}\n */\nexport default class Calendar extends InputComponent {\n\n    /**\n     * 构造函数\n     *\n     * @param  {Object} props   组件属性\n     * @param  {Object} context 组件上下文\n     * @public\n     */\n    constructor(props, context) {\n\n        super(props, context);\n\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n        this.onDateChange = this.onDateChange.bind(this);\n\n        const {defaultValue, value} = props;\n\n        const date = value === void 0 ? defaultValue : value;\n\n        /**\n         * 组件状态\n         *\n         * @type {Object}\n         */\n        this.state = {\n\n            ...this.state,\n\n            value: this.stringifyValue(date),\n\n            // 缓存用户在 confirm 前的选中值\n            date: date ? this.parseDate(date) : void 0,\n\n            // 是否打开选择窗\n            open: false\n\n        };\n\n    }\n\n    /**\n     * react生命周期，组件将更新时触发\n     *\n     * @param {Object} _ 属性\n     * @param {Object} nextState 状态\n     */\n    componentWillUpdate(_, nextState) {\n        const date = this.parseDate(nextState.value);\n        if (this.state.value !== nextState.value && (\n            date === void 0 || nextState.date === void 0 || !DateTime.isEqualDate(date, nextState.date)\n        )) {\n            this.setState({\n                date: this.parseDate(nextState.value)\n            });\n        }\n    }\n\n    /**\n     * 格式化日期\n     *\n     * @param {Date} rawValue 源日期对象\n     * @param {string=} format 日期格式，默认为当前实例的dateFormat\n     * @return {string} 格式化后的日期字符串\n     * @private\n     */\n    stringifyValue(rawValue) {\n\n        if (!DateTime.isDate(rawValue)) {\n            return rawValue;\n        }\n\n        const dateFormat = this.props.dateFormat;\n        return DateTime.format(rawValue, dateFormat);\n    }\n\n    /**\n     * 格式化日期对象\n     *\n     * @param  {string} date  日期字符串\n     * @return {Date}         转化后的日期对象\n     * @private\n     */\n    parseDate(date) {\n\n        if (typeof date !== 'string') {\n            return date;\n        }\n\n        let format = this.props.dateFormat;\n\n        return DateTime.parse(date, format);\n    }\n\n    /**\n     * 点击 Label 时触发，打开弹窗\n     *\n     * @private\n     */\n    onLabelClick() {\n        this.setState({open: true});\n    }\n\n    /**\n     * 在浮层上点击确定按钮时触发\n     *\n     * @private\n     */\n    onConfirm() {\n\n        let {value, date} = this.state;\n\n        value = this.parseDate(value);\n\n        if (value && DateTime.isEqualDate(date, this.parseDate(value))) {\n            this.setState({open: false});\n            return;\n        }\n\n        const newDate = date ? date : new Date();\n\n        this.setState({open: false, date: newDate});\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: this.stringifyValue(newDate)\n        }, () => {\n            this.setState({open: false, date: newDate});\n        });\n\n    }\n\n    /**\n     * 在浮层上点击取消按钮时触发\n     *\n     * @private\n     */\n    onCancel() {\n        this.setState({open: false});\n    }\n\n    /**\n     * CalendarPanel 日期变更时触发\n     * 当属性 autoConfirm 为 true 时，自动执行 onConfirm\n     *\n     * @param {Object} e 事件对象\n     * @param {Date}   e.value 改变后的日期值\n     * @private\n     */\n    onDateChange(e) {\n\n        const value = this.parseDate(e.value);\n        const newState = {\n            date: this.parseDate(value)\n        };\n\n        if (this.props.autoConfirm) {\n            super.onChange({\n                type: 'change',\n                target: this,\n                value: this.stringifyValue(value)\n            }, () => {\n                this.setState({\n                    ...newState,\n                    open: false\n                });\n            });\n        }\n        else {\n            this.setState(newState);\n        }\n    }\n\n    /**\n     * 渲染input\n     *\n     * @protected\n     * @return {ReactElement}\n     */\n    renderHiddenInput() {\n\n        const {name, value} = this.props;\n\n        return name\n            ? (\n                <input\n                    name={name}\n                    type=\"hidden\"\n                    value={value} />\n            )\n            : null;\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            state,\n            props\n        } = this;\n\n        const {\n            lang,\n            disabled,\n            readOnly,\n            size,\n            placeholder,\n            ...others\n        } = props;\n\n        const {value, open, date} = state;\n\n        let {begin, end} = props;\n\n        begin = begin ? this.parseDate(begin) : null;\n        end = end ? this.parseDate(end) : null;\n\n        const className = cx(props)\n            .addStates({focus: open})\n            .addStates(this.getStyleStates())\n            .build();\n\n        return (\n            <div {...omit(others, ['dateFormat', 'name', 'autoConfirm', 'variants', 'states'])} className={className}>\n                {this.renderHiddenInput()}\n                <label onClick={(disabled || readOnly) ? null : this.onLabelClick}>\n                    {value ? value : (\n                        <span className={cx().part('label-placeholder').build()}>\n                            {placeholder}\n                        </span>\n                    )}\n                    <Icon icon='expand-more' />\n                </label>\n                <Confirm\n                    open={open}\n                    variants={['calendar']}\n                    onConfirm={this.onConfirm}\n                    onCancel={this.onCancel}\n                    size={size}\n                    buttonVariants={['secondery', 'calendar']} >\n                    <Panel\n                        date={date}\n                        begin={begin}\n                        end={end}\n                        lang={lang}\n                        onChange={this.onDateChange} />\n                </Confirm>\n            </div>\n        );\n\n    }\n\n}\n\nCalendar.displayName = 'Calendar';\n\nCalendar.LANG = {\n\n    // 对于 '周' 的称呼\n    week: '周',\n\n    // 星期对应的顺序表示\n    days: '日,一,二,三,四,五,六'\n\n};\n\nCalendar.defaultProps = {\n    ...InputComponent.defaultProps,\n    dateFormat: 'YYYY-MM-DD',\n    lang: Calendar.LANG,\n    placeholder: '请选择'\n};\n\nCalendar.propTypes = {\n\n    ...InputComponent.propTypes,\n\n    value: PropTypes.string,\n\n    autoConfirm: PropTypes.bool,\n\n    dateFormat: PropTypes.string,\n\n    end: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.string\n    ]),\n\n    begin: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.string\n    ]),\n\n    lang: PropTypes.shape({\n        week: PropTypes.string,\n        days: PropTypes.string\n    })\n\n};\n\nCalendar.childContextTypes = InputComponent.childContextTypes;\n\nCalendar.contextTypes = InputComponent.contextTypes;\n"]}