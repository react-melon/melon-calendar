{"version":3,"sources":["UnitCalendar.js"],"names":["normalize","getNextTime","getContinuousFragments","date","cx","UnitCalendar","props","context","onChange","bind","parse","format","e","nextValue","value","state","target","continuous","calculate","map","current","next","sort","cLength","length","nLength","unit","firtNext","Date","firstCurrent","lastNext","setDate","getDate","lastCurrent","concat","slice","i","time","parseValue","split","stringifyValue","term","join","render","begin","end","rest","fragment","options","build","propTypes","instanceOf","oneOf","isRequired","arrayOf","bool","defaultValue","string","defaultProps","childContextTypes","contextTypes","getDay","setMonth","getMonth","setFullYear","getFullYear","result","push"],"mappings":"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","file":"UnitCalendar.js","sourcesContent":["/**\n * @file UnitCalendar\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes} from 'react';\n\nimport {create} from 'melon-core/classname/cxBuilder';\nimport InputComponent from 'melon-core/InputComponent';\n\nimport BoxGroup from 'melon/BoxGroup';\nimport * as date from './util';\nimport omit from 'lodash/omit';\n\nconst cx = create('UnitCalendar');\n\n/**\n * melon 日期区间选择器\n *\n * @class\n * @extends {melon-core/InputComponent}\n */\nexport default class UnitCalendar extends InputComponent {\n\n    /**\n     * 构造函数\n     *\n     * @param  {Object} props   组件属性\n     * @param  {Object} context 组件上下文\n     * @public\n     */\n    constructor(props, context) {\n        super(props, context);\n        this.onChange = this.onChange.bind(this);\n        this.parse = this.parse.bind(this);\n        this.format = this.format.bind(this);\n    }\n\n    /**\n     * BoxGroup 改变时触发\n     *\n     * @param  {Object} e 事件对象\n     * @private\n     */\n    onChange(e) {\n\n        const nextValue = e.value;\n\n        const value = this.state.value;\n\n        super.onChange({\n\n            target: this,\n\n            // 如果是连续的，这里需要算一下，不是连续的就以新值为主\n            value: this.props.continuous\n                ? this.calculate(value, nextValue).map(this.parse)\n                : value\n        });\n\n    }\n\n    /**\n     * 时间区间的计算\n     *\n     * @param  {Array<Date>}  current 当前区间\n     * @param  {Array<Date>}  next    改变后的区间\n     * @return {Array<string>}\n     */\n    calculate(current, next) {\n\n        current = current.map(this.format).sort();\n\n        next = next.sort();\n\n        let cLength = current.length;\n        let nLength = next.length;\n        let unit = this.props.unit;\n\n        if (cLength === nLength) {\n            return current;\n        }\n\n        if (!cLength || !nLength) {\n            return next;\n        }\n\n        // fill\n        if (cLength < nLength) {\n\n            let firtNext = new Date(next[0]);\n            let firstCurrent = new Date(current[0]);\n\n            if (firtNext < firstCurrent) {\n                return [\n                    ...getContinuousFragments(firtNext, firstCurrent, unit).map(this.format),\n                    ...current\n                ];\n            }\n\n            let lastNext = new Date(next[nLength - 1]);\n            lastNext.setDate(lastNext.getDate() + 1);\n            let lastCurrent = new Date(current[cLength - 1]);\n\n            return current.concat(getContinuousFragments(lastCurrent, lastNext, unit).slice(1).map(this.format));\n\n        }\n\n        // cut\n        for (let i = 0; i < nLength; ++i) {\n            if (current[i] < next[i]) {\n                if (i === 0) {\n                    return current.slice(1);\n                }\n                return current.slice(0, i);\n            }\n        }\n\n        return current.slice(0, -1);\n\n    }\n\n    /**\n     * 日期字符串格式化\n     *\n     * @param  {string} time 日期字符串\n     * @return {Date}\n     */\n    parse(time) {\n        return date.parse(time, this.props.format);\n    }\n\n    /**\n     * 日期对象格式化\n     *\n     * @param  {Date} time 日期对象\n     * @return {string}\n     */\n    format(time) {\n        return date.format(time, this.props.format);\n    }\n\n    /**\n     * 日期区间格式转换\n     *\n     * @param  {string} value 日期区间字符串\n     * @return {Array<Date>}\n     */\n    parseValue(value = '') {\n        return value\n            .split(',')\n            .map(function (date) {\n                return this.parse(date);\n            });\n    }\n\n    /**\n     * 日期区间格式转换\n     *\n     * @param  {Array<Date>} value 日期区间数组\n     * @return {string}\n     */\n    stringifyValue(value = []) {\n        return value\n            .map(function (term) {\n                return this.format(term);\n            })\n            .join(',');\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        let {begin, end, unit, format, ...rest} = this.props;\n\n        let value = this.state.value;\n\n        value = value\n            .map(function (fragment) {\n                return date.format(normalize(fragment, unit), format);\n            })\n            .sort();\n\n        const options = getContinuousFragments(begin, end, unit).map(fragment => {\n            let begin = this.format(fragment);\n            let end = getNextTime(fragment, unit);\n            end.setDate(end.getDate() - 1);\n            end = this.format(end);\n            return (<option key={begin} value={begin} label={`${begin} ~ ${end}`} />);\n        });\n\n        return (\n            <div className={cx(this.props).build()}>\n                <BoxGroup\n                    {...omit(rest, ['defaultValue'])}\n                    boxModel=\"checkbox\"\n                    onChange={this.onChange}\n                    value={value}>\n                    {options}\n                </BoxGroup>\n            </div>\n        );\n\n    }\n\n\n}\n\nUnitCalendar.propTypes = {\n    ...InputComponent.propTypes,\n    begin: PropTypes.instanceOf(Date),\n    end: PropTypes.instanceOf(Date),\n    unit: PropTypes.oneOf(['week', 'month', 'year']).isRequired,\n    value: PropTypes.arrayOf(Date),\n    continuous: PropTypes.bool.isRequired,\n    defaultValue: PropTypes.arrayOf(PropTypes.string)\n};\n\nUnitCalendar.defaultProps = {\n    ...InputComponent.defaultProps,\n    continuous: true,\n    defaultValue: [],\n    format: 'YYYY-MM-DD'\n};\n\nUnitCalendar.childContextTypes = InputComponent.childContextTypes;\nUnitCalendar.contextTypes = InputComponent.contextTypes;\n\n\n/**\n * 处理时间对象，只留下当前单位需要的部分\n *\n * @param  {Date}   time 时间\n * @param  {string} unit 单位\n * @return {Date}\n */\nexport function normalize(time, unit) {\n    time = new Date(time);\n    // 得到周一\n    if (unit === 'week') {\n        time.setDate(time.getDate() - time.getDay() + 1);\n    }\n    // 得到1日\n    else if (unit === 'month') {\n        time.setDate(1);\n    }\n    // 得到1月1日\n    else {\n        time.setMonth(0);\n        time.setDate(1);\n    }\n    return time;\n}\n\n/**\n * 处理时间对象，返回当前单位下下一个值\n *\n * @param  {Date}   time 时间\n * @param  {string} unit 单位\n * @return {Date}\n */\nexport function getNextTime(time, unit) {\n    time = normalize(time, unit);\n    if (unit === 'week') {\n        time.setDate(time.getDate() + 7);\n    }\n    else if (unit === 'month') {\n        time.setMonth(time.getMonth() + 1);\n    }\n    else {\n        time.setFullYear(time.getFullYear() + 1);\n    }\n    return time;\n}\n\n/**\n * 获取所允许的时间区间\n *\n * @param  {Date} begin   起始时间\n * @param  {Date} end     结束时间\n * @param  {string} unit  单位\n * @return {Array<Date>}\n */\nexport function getContinuousFragments(begin, end, unit) {\n\n    begin = normalize(begin, unit);\n\n    let result = [];\n\n    while (begin < end) {\n        result.push(new Date(begin));\n        if (unit === 'week') {\n            begin.setDate(begin.getDate() + 7);\n        }\n        else if (unit === 'month') {\n            begin.setMonth(begin.getMonth() + 1);\n        }\n        else {\n            begin.setFullYear(begin.getFullYear() + 1);\n        }\n    }\n\n    return result;\n\n}\n"]}